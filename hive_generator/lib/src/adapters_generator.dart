import 'dart:async';
import 'dart:convert';
import 'dart:io';

import 'package:analyzer/dart/element/element.dart';
import 'package:build/build.dart';
import 'package:hive_ce/hive.dart';
import 'package:hive_ce_generator/src/model/hive_schema.dart';
import 'package:hive_ce_generator/src/model/revived_generate_adapter.dart';
import 'package:hive_ce_generator/src/type_adapter_generator.dart';
import 'package:source_gen/source_gen.dart';
import 'package:yaml/yaml.dart';
import 'package:yaml_writer/yaml_writer.dart';
import 'package:path/path.dart' as path;

/// Builder that generates Hive adapters from a GenerateAdapters annotation
class AdaptersGenerator extends GeneratorForAnnotation<GenerateAdapters> {
  @override
  Future<String> generateForAnnotatedElement(
    Element element,
    ConstantReader annotation,
    BuildStep buildStep,
  ) async {
    final library = await buildStep.inputLibrary;
    final revived = RevivedGenerateAdapters(annotation);

    // This may not be the safest thing to do, but the build_runner really
    // did not like reading and outputting the same file
    final schemaFile = File(path.join('lib', 'hive', 'hive_schema.yaml'));
    final HiveSchema schema;
    if (schemaFile.existsSync()) {
      final schemaContent = await schemaFile.readAsString();
      schema =
          HiveSchema.fromJson(jsonDecode(jsonEncode(loadYaml(schemaContent))));
    } else {
      schema = HiveSchema(nextTypeId: revived.firstTypeId, types: {});
    }

    // Sort by type id for deterministic output. Put new types at the end.
    revived.specs.sort((a, b) {
      final aTypeId = schema.types[a.type.getDisplayString()]?.typeId ?? 999999;
      final bTypeId = schema.types[b.type.getDisplayString()]?.typeId ?? 999999;
      return aTypeId.compareTo(bTypeId);
    });

    var nextTypeId = schema.nextTypeId;
    final newTypes = <String, HiveSchemaType>{};
    final content = StringBuffer();
    for (final spec in revived.specs) {
      final typeKey = spec.type.getDisplayString();
      final schemaType = schema.types[typeKey] ??
          HiveSchemaType(typeId: nextTypeId++, nextIndex: 0, fields: {});
      final result = TypeAdapterGenerator.generateTypeAdapter(
        element: spec.type.element!,
        library: library,
        typeId: schemaType.typeId,
        schema: schemaType,
      );

      content.write(result.content);
      newTypes[typeKey] = result.schema!;
    }

    final yaml = YamlWriter()
        .write(HiveSchema(nextTypeId: nextTypeId, types: newTypes).toJson());
    schemaFile.writeAsStringSync(
      '''
# Generated by Hive CE
# Manual modifications may be necessary for certain migrations
# If edited manually, delete `hive_adapters.g.dart` before regenerating
# Check into version control
$yaml''',
    );

    return content.toString();
  }
}
